// Mocks generated by Mockito 5.4.2 from annotations
// in english_dictionary/test/core/feature/word_signification/domain/usecases/get_word_signification/get_word_signification_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:english_dictionary/core/feature/word_signification/core/errors/word_signification_failure.dart' as _i6;
import 'package:english_dictionary/core/feature/word_signification/data/datasource/get_word_signification/get_word_signification_datasource_interface.dart'
    as _i2;
import 'package:english_dictionary/core/feature/word_signification/data/repositories/get_word_signification/get_word_signification_repository.dart'
    as _i4;
import 'package:english_dictionary/core/feature/word_signification/domain/entities/word_signification_entity.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIGetWordSignificationDatasource_0 extends _i1.SmartFake implements _i2.IGetWordSignificationDatasource {
  _FakeIGetWordSignificationDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWordSignificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWordSignificationRepository extends _i1.Mock implements _i4.GetWordSignificationRepository {
  MockGetWordSignificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IGetWordSignificationDatasource get _datasource => (super.noSuchMethod(
        Invocation.getter(#datasource),
        returnValue: _FakeIGetWordSignificationDatasource_0(
          this,
          Invocation.getter(#datasource),
        ),
      ) as _i2.IGetWordSignificationDatasource);
  @override
  _i5.Future<_i3.Either<_i6.GetWordSignificationFailure, _i7.WordSignificationEntity>> getWordSignification(String? word) => (super.noSuchMethod(
        Invocation.method(
          #getWordSignification,
          [word],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.GetWordSignificationFailure, _i7.WordSignificationEntity>>.value(
            _FakeEither_1<_i6.GetWordSignificationFailure, _i7.WordSignificationEntity>(
          this,
          Invocation.method(
            #getWordSignification,
            [word],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.GetWordSignificationFailure, _i7.WordSignificationEntity>>);
}
