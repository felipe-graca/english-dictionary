// Mocks generated by Mockito 5.4.2 from annotations
// in english_dictionary/test/core/feature/favorites/cubit/favorites_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:english_dictionary/core/feature/favorites/core/errors/favorites_failure.dart'
    as _i4;
import 'package:english_dictionary/core/feature/favorites/domain/entities/favorite_word_entity.dart'
    as _i5;
import 'package:english_dictionary/core/feature/favorites/domain/usecases/get_favorites_words/get_favorites_words_usecase.dart'
    as _i2;
import 'package:english_dictionary/core/feature/favorites/domain/usecases/remove_favorite_word/remove_favorite_word_usecase.dart'
    as _i7;
import 'package:english_dictionary/core/feature/favorites/domain/usecases/save_favorite_word/save_favorite_word_usecase.dart'
    as _i8;
import 'package:english_dictionary/core/usecase/usecase.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetFavoritesWordsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoritesWordsUsecase extends _i1.Mock
    implements _i2.GetFavoritesWordsUsecase {
  MockGetFavoritesWordsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.GetFavoritesWordsFailure?, List<_i5.FavoriteWordEntity>)>
      call(_i6.NoParams? noParams) => (super.noSuchMethod(
            Invocation.method(
              #call,
              [noParams],
            ),
            returnValue: _i3.Future<
                (
                  _i4.GetFavoritesWordsFailure?,
                  List<_i5.FavoriteWordEntity>
                )>.value((null, <_i5.FavoriteWordEntity>[])),
          ) as _i3.Future<
              (_i4.GetFavoritesWordsFailure?, List<_i5.FavoriteWordEntity>)>);
}

/// A class which mocks [RemoveFavoriteWordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFavoriteWordUsecase extends _i1.Mock
    implements _i7.RemoveFavoriteWordUsecase {
  MockRemoveFavoriteWordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.RemoveFavoriteWordFailure?, bool)> call(
          _i5.FavoriteWordEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i3.Future<(_i4.RemoveFavoriteWordFailure?, bool)>.value(
            (null, false)),
      ) as _i3.Future<(_i4.RemoveFavoriteWordFailure?, bool)>);
}

/// A class which mocks [SaveFavoriteWordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveFavoriteWordUsecase extends _i1.Mock
    implements _i8.SaveFavoriteWordUsecase {
  MockSaveFavoriteWordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.SaveFavoriteWordFailure?, bool)> call(
          _i5.FavoriteWordEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i3.Future<(_i4.SaveFavoriteWordFailure?, bool)>.value(
            (null, false)),
      ) as _i3.Future<(_i4.SaveFavoriteWordFailure?, bool)>);
}
