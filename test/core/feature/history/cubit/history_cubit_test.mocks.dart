// Mocks generated by Mockito 5.4.2 from annotations
// in english_dictionary/test/core/feature/history/cubit/history_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:english_dictionary/core/feature/history/core/errors/hisotry_failure.dart'
    as _i4;
import 'package:english_dictionary/core/feature/history/domain/entities/history_word_entity.dart'
    as _i5;
import 'package:english_dictionary/core/feature/history/domain/usecases/clear_history_word/clear_history_word_usecase.dart'
    as _i7;
import 'package:english_dictionary/core/feature/history/domain/usecases/get_history_words/get_history_words_usecase.dart'
    as _i2;
import 'package:english_dictionary/core/feature/history/domain/usecases/save_history_word/save_history_word_usecase.dart'
    as _i8;
import 'package:english_dictionary/core/usecase/usecase.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetHistoryWordsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHistoryWordsUsecase extends _i1.Mock
    implements _i2.GetHistoryWordsUsecase {
  MockGetHistoryWordsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.GetHistoryWordsFailure?, List<_i5.HistoryWordEntity>)> call(
          _i6.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue: _i3.Future<
            (
              _i4.GetHistoryWordsFailure?,
              List<_i5.HistoryWordEntity>
            )>.value((null, <_i5.HistoryWordEntity>[])),
      ) as _i3
          .Future<(_i4.GetHistoryWordsFailure?, List<_i5.HistoryWordEntity>)>);
}

/// A class which mocks [ClearHistoryWordsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearHistoryWordsUsecase extends _i1.Mock
    implements _i7.ClearHistoryWordsUsecase {
  MockClearHistoryWordsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.ClearHistoryWordsFailure?, bool)> call(
          _i6.NoParams? noParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParams],
        ),
        returnValue: _i3.Future<(_i4.ClearHistoryWordsFailure?, bool)>.value(
            (null, false)),
      ) as _i3.Future<(_i4.ClearHistoryWordsFailure?, bool)>);
}

/// A class which mocks [SaveHistoryWordUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveHistoryWordUsecase extends _i1.Mock
    implements _i8.SaveHistoryWordUsecase {
  MockSaveHistoryWordUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<(_i4.SaveHistoryWordFailure?, bool)> call(
          _i5.HistoryWordEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i3.Future<(_i4.SaveHistoryWordFailure?, bool)>.value(
            (null, false)),
      ) as _i3.Future<(_i4.SaveHistoryWordFailure?, bool)>);
}
